{"ast":null,"code":"var _jsxFileName = \"/home/shyam/Videos/reactProject/roomVChat/client/src/routes/Room.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  height: 100vh;\n  width: 90%;\n  margin: auto;\n  flex-wrap: wrap;\n`;\nconst StyledVideo = styled.video`\n  height: 40%;\n  width: 50%;\n`;\n\nconst Video = props => {\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      ref.current.srcObject = stream;\n    });\n  }, [props.peer]);\n  return /*#__PURE__*/React.createElement(StyledVideo, {\n    playsInline: true,\n    autoPlay: true,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  });\n};\n\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\nconst socket = io.connect(\"https://videochatserver-evr8.onrender.com/\");\nconsole.log(socketRef.current);\n\nconst Room = props => {\n  const [peers, setPeers] = useState([]); // const socketRef = useRef();\n\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n  console.log(roomID);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      socketRef.current.emit(\"join room\", roomID);\n      socketRef.current.on(\"all users\", users => {\n        const peers = [];\n        users.forEach(userID => {\n          const peer = createPeer(userID, socketRef.current.id, stream);\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peers.push(peer);\n        });\n        setPeers(peers);\n      });\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        item.peer.signal(payload.signal);\n      });\n    });\n  }, [roomID]);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledVideo, {\n    muted: true,\n    ref: userVideo,\n    autoPlay: true,\n    playsInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), peers.map((peer, index) => {\n    if (peer._remoteStreams != null) {\n      return /*#__PURE__*/React.createElement(Video, {\n        key: index,\n        peer: peer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 18\n        }\n      });\n    }\n\n    return 0;\n  }));\n};\n\nexport default Room;","map":{"version":3,"sources":["/home/shyam/Videos/reactProject/roomVChat/client/src/routes/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","styled","Container","div","StyledVideo","video","Video","props","ref","peer","on","stream","current","srcObject","videoConstraints","height","window","innerHeight","width","innerWidth","socket","connect","console","log","socketRef","Room","peers","setPeers","userVideo","peersRef","roomID","match","params","navigator","mediaDevices","getUserMedia","audio","then","emit","users","forEach","userID","createPeer","id","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","index","_remoteStreams"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  height: 100vh;\n  width: 90%;\n  margin: auto;\n  flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video`\n  height: 40%;\n  width: 50%;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, [props.peer]);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\n\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2,\n};\n\nconst socket = io.connect(\n  \"https://videochatserver-evr8.onrender.com/\"\n);\nconsole.log(socketRef.current);\n\nconst Room = (props) => {\n  const [peers, setPeers] = useState([]);\n  // const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n  console.log(roomID);\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ video: videoConstraints, audio: true })\n      .then((stream) => {\n        userVideo.current.srcObject = stream;\n        socketRef.current.emit(\"join room\", roomID);\n        socketRef.current.on(\"all users\", (users) => {\n          const peers = [];\n          users.forEach((userID) => {\n            const peer = createPeer(userID, socketRef.current.id, stream);\n            peersRef.current.push({\n              peerID: userID,\n              peer,\n            });\n            peers.push(peer);\n          });\n          setPeers(peers);\n        });\n\n        socketRef.current.on(\"user joined\", (payload) => {\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer,\n          });\n\n          setPeers((users) => [...users, peer]);\n        });\n\n        socketRef.current.on(\"receiving returned signal\", (payload) => {\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\n          item.peer.signal(payload.signal);\n        });\n      });\n  }, [roomID]);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal,\n      });\n    });\n\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\n    });\n\n    peer.signal(incomingSignal);\n\n    return peer;\n  }\n\n  return (\n    <Container>\n      <StyledVideo muted ref={userVideo} autoPlay playsInline />\n      {peers.map((peer, index) => {\n        if (peer._remoteStreams != null) {\n          return <Video key={index} peer={peer} />;\n        }\n        return 0;\n      })}\n    </Container>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}